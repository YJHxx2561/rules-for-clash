# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:

  自建节点:
    url: "https://jpmsubstore.yjhup.com/substore/download/zijian"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 


  良心云机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/lxy"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  kitty机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/kitty"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  Mitce机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/mitce"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  FSCloud机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/fscloud"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  白嫖机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/baipiao"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  赔钱机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/peiqian"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  翻云机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/fanyun"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  XLMCloud机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/xlmcloud"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连 
    
  流量光机场:
    url: "https://jpmsubstore.yjhup.com/substore/download/liuliangguang"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

    
# 节点信息
proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: true
unified-delay: true
tcp-concurrent: true
# interface-name: enp6s18
log-level: warning
find-process-mode: 'off'
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 为防止使用插件朋友遇到面板问题，我注释掉了此模块。
# 跑裸核朋友自行删除注释即可，使用nikki仅内核的ui路径改为/etc/nikki/run/ui
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/mihomo/ui"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  #使用nikki，混入全部不修改的情况，开启接口指定为nikki
  #使用仅内核自行修改下面三项为true
  #device: nikki
  auto-route: false
  auto-redirect: false
  auto-detect-interface: false

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 198.20.0.1/16
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 202.115.64.33
    - 202.115.64.34
    - 233.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 202.115.64.33
    - 202.115.64.34
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。

proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [直连, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 💻 18comic, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: ®️ 我的域名, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 📹 YouTube, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🍀 Google, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🤖 AI, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🐬 OneDrive, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🪟 Microsoft, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🎵 TikTok, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 📲 Telegram, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  #- {name: 🎥 NETFLIX, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 💶 PayPal, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🎯 全球直连, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [直连, 🚀 默认代理, 所有-手动, 所有-手动2, 所有-自动, 🇭🇰 香港-故转, 🇨🇳 台湾-故转, 🇯🇵 日本-故转, 🇸🇬 新加坡-故转, 🇰🇷 韩国-故转, 🇺🇲 美国-故转, 🇬🇧 英国-故转, 其他-故转]}


  - name: 所有-默认代理
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝)).)*$"

  - name: 所有-手动
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝)).)*$"

  - name: 所有-手动2
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝)).)*$"

  - name: 所有-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "^((?!(直连|拒绝)).)*$"


  # 香港组
  - name: 🇭🇰 香港-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇭🇰 香港-手动
      - 🇭🇰 香港-自动
  
  - name: 🇭🇰 香港-手动
    type: select
    include-all: true
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
    
  - name: 🇭🇰 香港-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"
 
  # 台湾组
  - name: 🇨🇳 台湾-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇨🇳 台湾-手动
      - 🇨🇳 台湾-自动
  - name: 🇨🇳 台湾-手动
    type: select
    include-all: true
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan)).*$"
  - name: 🇨🇳 台湾-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan)).*$"

  # 日本组
  - name: 🇯🇵 日本-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇯🇵 日本-手动
      - 🇯🇵 日本-自动
  - name: 🇯🇵 日本-手动
    type: select
    include-all: true
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"
  - name: 🇯🇵 日本-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"

  # 新加坡组
  - name: 🇸🇬 新加坡-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇸🇬 新加坡-手动
      - 🇸🇬 新加坡-自动
  - name: 🇸🇬 新加坡-手动
    type: select
    include-all: true
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"
  - name: 🇸🇬 新加坡-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"

  # 韩国组
  - name: 🇰🇷 韩国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇰🇷 韩国-手动
      - 🇰🇷 韩国-自动
  - name: 🇰🇷 韩国-手动
    type: select
    include-all: true
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"
  - name: 🇰🇷 韩国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"

  # 美国组
  - name: 🇺🇲 美国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇺🇲 美国-手动
      - 🇺🇲 美国-自动
  - name: 🇺🇲 美国-手动
    type: select
    include-all: true
    filter: "(?=.*(广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"
  - name: 🇺🇲 美国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"

  # 英国组
  - name: 🇬🇧 英国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 🇬🇧 英国-手动
      - 🇬🇧 英国-自动
  - name: 🇬🇧 英国-手动
    type: select
    include-all: true
    filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"
  - name: 🇬🇧 英国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"

  # 其他组
  - name: 其他-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 其他-手动
      - 其他-自动
  - name: 其他-手动
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"
  - name: 其他-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|US|美国|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"



# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,private_ip,🎯 全球直连,no-resolve
  - RULE-SET,private_domain,🎯 全球直连
  - RULE-SET,18comic1,💻 18comic
  - RULE-SET,18comic2,💻 18comic
  - RULE-SET,mydomain,®️ 我的域名
  - RULE-SET,mydirect,🎯 全球直连
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,apple_domain,🎯 全球直连
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,telegram_domain,📲 Telegram
  #- RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,apple_ip,🎯 全球直连,no-resolve
  - RULE-SET,google_ip,🍀 Google,no-resolve
  #- RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,geolocation-!cn,🚀 默认代理
  #- RULE-SET,cn_domain,🎯 全球直连
  #- RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼

# 规则集
## type：可选http/file/inline  behavior：可选domain/ipcidr/classical format：可选yaml/text/mrs
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

  
rule-providers: 

  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/YJHxx2561/rules-for-clash/refs/heads/main/ProxyLite.list"}
  ai: {  <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  #netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  private_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  #netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  apple_ip: {<<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo-lite/geoip/apple.mrs"}

  18comic1: { <<: *class, url: "https://raw.githubusercontent.com/YJHxx2561/rules-for-clash/refs/heads/main/Singapore.list"}
  18comic2: { <<: *class, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/18comic.list"}
  mydirect: { <<: *class, url: "https://raw.githubusercontent.com/YJHxx2561/rules-for-clash/refs/heads/main/mydirect.list"}
  mydomain: { <<: *class, url: "https://raw.githubusercontent.com/YJHxx2561/rules-for-clash/refs/heads/main/mydomain.list"}
